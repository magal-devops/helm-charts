{{- range $appName, $app := .Values.kubernetes.apps }}
{{- $ctx := dict "app" $app "appName" $appName "root" $ }}
{{- if and $app.externalSecret $app.externalSecret.enabled }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $app.externalSecret.name | default (include "k8s-app.fullname" $ctx) }}
  namespace: {{ include "k8s-app.namespace" $ }}
  labels:
    {{- include "k8s-app.labels" $ctx | nindent 4 }}
    {{- with $app.externalSecret.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
    {{- with $app.externalSecret.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- with $app.externalSecret.refreshInterval }}
  refreshInterval: {{ . }}
  {{- end }}
  secretStoreRef:
    name: {{ $app.externalSecret.secretStoreRef.name }}
    kind: {{ $app.externalSecret.secretStoreRef.kind | default "SecretStore" }}
  target:
    name: {{ $app.externalSecret.target.name | default (include "k8s-app.fullname" $ctx) }}
    {{- with $app.externalSecret.target.creationPolicy }}
    creationPolicy: {{ . }}
    {{- end }}
    {{- with $app.externalSecret.target.deletionPolicy }}
    deletionPolicy: {{ . }}
    {{- end }}
    {{- with $app.externalSecret.target.template }}
    template:
      {{- with .type }}
      type: {{ . }}
      {{- end }}
      {{- with .metadata }}
      metadata:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .data }}
      data:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .templateFrom }}
      templateFrom:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
  {{- with $app.externalSecret.data }}
  data:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $app.externalSecret.dataFrom }}
  dataFrom:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
{{- end }}

{{- range $appName, $app := .Values.kubernetes.apps }}
{{- $ctx := dict "app" $app "appName" $appName "root" $ }}
{{- if and $app.secretStore $app.secretStore.enabled }}
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: {{ $app.secretStore.name | default (printf "%s-secret-store" (include "k8s-app.fullname" $ctx)) }}
  namespace: {{ include "k8s-app.namespace" $ }}
  labels:
    {{- include "k8s-app.labels" $ctx | nindent 4 }}
    {{- with $app.secretStore.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with $app.secretStore.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  provider:
    {{- if $app.secretStore.provider.aws }}
    aws:
      service: {{ $app.secretStore.provider.aws.service | default "SecretsManager" }}
      region: {{ $app.secretStore.provider.aws.region }}
      {{- with $app.secretStore.provider.aws.role }}
      role: {{ . }}
      {{- end }}
      {{- if $app.secretStore.provider.aws.auth }}
      auth:
        {{- if $app.secretStore.provider.aws.auth.secretRef }}
        secretRef:
          {{- with $app.secretStore.provider.aws.auth.secretRef.accessKeyID }}
          accessKeyID:
            name: {{ .name }}
            key: {{ .key }}
          {{- end }}
          {{- with $app.secretStore.provider.aws.auth.secretRef.secretAccessKey }}
          secretAccessKey:
            name: {{ .name }}
            key: {{ .key }}
          {{- end }}
        {{- end }}
        {{- if $app.secretStore.provider.aws.auth.jwt }}
        jwt:
          serviceAccountRef:
            name: {{ $app.secretStore.provider.aws.auth.jwt.serviceAccountRef.name }}
        {{- end }}
      {{- end }}
    {{- else if $app.secretStore.provider.vault }}
    vault:
      server: {{ $app.secretStore.provider.vault.server }}
      path: {{ $app.secretStore.provider.vault.path }}
      version: {{ $app.secretStore.provider.vault.version | default "v2" }}
      {{- if $app.secretStore.provider.vault.auth }}
      auth:
        {{- if $app.secretStore.provider.vault.auth.kubernetes }}
        kubernetes:
          mountPath: {{ $app.secretStore.provider.vault.auth.kubernetes.mountPath | default "kubernetes" }}
          role: {{ $app.secretStore.provider.vault.auth.kubernetes.role }}
          serviceAccountRef:
            name: {{ $app.secretStore.provider.vault.auth.kubernetes.serviceAccountRef.name }}
        {{- end }}
      {{- end }}
    {{- else if $app.secretStore.provider.gcpsm }}
    gcpsm:
      projectID: {{ $app.secretStore.provider.gcpsm.projectID }}
      {{- if $app.secretStore.provider.gcpsm.auth }}
      auth:
        {{- if $app.secretStore.provider.gcpsm.auth.secretRef }}
        secretRef:
          secretAccessKey:
            name: {{ $app.secretStore.provider.gcpsm.auth.secretRef.secretAccessKey.name }}
            key: {{ $app.secretStore.provider.gcpsm.auth.secretRef.secretAccessKey.key }}
        {{- end }}
        {{- if $app.secretStore.provider.gcpsm.auth.workloadIdentity }}
        workloadIdentity:
          clusterLocation: {{ $app.secretStore.provider.gcpsm.auth.workloadIdentity.clusterLocation }}
          clusterName: {{ $app.secretStore.provider.gcpsm.auth.workloadIdentity.clusterName }}
          serviceAccountRef:
            name: {{ $app.secretStore.provider.gcpsm.auth.workloadIdentity.serviceAccountRef.name }}
        {{- end }}
      {{- end }}
    {{- else if $app.secretStore.provider.azurekv }}
    azurekv:
      vaultUrl: {{ $app.secretStore.provider.azurekv.vaultUrl }}
      {{- with $app.secretStore.provider.azurekv.tenantId }}
      tenantId: {{ . }}
      {{- end }}
      {{- if $app.secretStore.provider.azurekv.auth }}
      auth:
        {{- if $app.secretStore.provider.azurekv.auth.clientId }}
        clientId: {{ $app.secretStore.provider.azurekv.auth.clientId }}
        {{- end }}
        {{- if $app.secretStore.provider.azurekv.auth.clientSecret }}
        clientSecret:
          name: {{ $app.secretStore.provider.azurekv.auth.clientSecret.name }}
          key: {{ $app.secretStore.provider.azurekv.auth.clientSecret.key }}
        {{- end }}
      {{- end }}
    {{- end }}
{{- end }}
{{- end }}

{{- range $appName, $app := .Values.kubernetes.apps }}
{{- $ctx := dict "app" $app "appName" $appName "root" $ }}
{{- if and $app.clusterSecretStore $app.clusterSecretStore.enabled }}
---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: {{ $app.clusterSecretStore.name | default (printf "%s-cluster-secret-store" (include "k8s-app.fullname" $ctx)) }}
  labels:
    {{- include "k8s-app.labels" $ctx | nindent 4 }}
    {{- with $app.clusterSecretStore.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with $app.clusterSecretStore.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  provider:
    {{- if $app.clusterSecretStore.provider.aws }}
    aws:
      service: {{ $app.clusterSecretStore.provider.aws.service | default "SecretsManager" }}
      region: {{ $app.clusterSecretStore.provider.aws.region }}
      {{- with $app.clusterSecretStore.provider.aws.role }}
      role: {{ . }}
      {{- end }}
      {{- if $app.clusterSecretStore.provider.aws.auth }}
      auth:
        {{- if $app.clusterSecretStore.provider.aws.auth.jwt }}
        jwt:
          serviceAccountRef:
            name: {{ $app.clusterSecretStore.provider.aws.auth.jwt.serviceAccountRef.name }}
            namespace: {{ $app.clusterSecretStore.provider.aws.auth.jwt.serviceAccountRef.namespace | default (include "k8s-app.namespace" $) }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- with $app.clusterSecretStore.conditions }}
  conditions:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
{{- end }} 